{"version":3,"sources":["component/home.jsx","container/home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["CustomContainer","styled","Container","Display","div","ButtonsContainer","NumberButton","Button","props","button","Home","useState","display","setDisplay","numberhelper","numberHelper","operator","setOperator","reset","resetDisplay","useEffect","numberClickHandler","number","oldNumber","String","operatorClickHandler","equalClickHandler","percentageClickHandler","result","firstValue","secondValue","Number","operationHandler","percentage","map","item","index","variant","key","onClick","value","BodyContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ee067a1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button, Container } from 'react-bootstrap';\n\nconst CustomContainer = styled(Container)`\n  display:flex;\n  justify-content:center;\n  flex-direction:column;\n  width:500px;\n  font-family:Roboto;\n  font-size:72px;\n`;\n\nconst Display = styled.div`\n  display:flex;\n  justify-content:flex-end;\n`;\n\nconst ButtonsContainer = styled.div`\n  display:flex;\n  flex-wrap: wrap;\n  width: 500px;\n`;\n\nconst NumberButton = styled(Button)`\nwidth:${ (props) => props.button === 0 ? '220px' : '100px'};\nheight:100px;\nmargin:10px;\nfont-family:Roboto;\nfont-size:40px;\n`;\n\nconst Home = () => {\n  // [stateVariableName, functionName] = useState(initialValue)\n  const [display, setDisplay] = useState('');\n  const [numberhelper, numberHelper] = useState('');\n  const [operator, setOperator] = useState('');\n  const [reset, resetDisplay] = useState(false);\n\n  // Works as componentDidMount, componentDidUpdate and componentWillUnmount.\n  useEffect(() => {\n  }, [operator]);\n\n  const clickHandler = value => typeof value === 'number' ? numberClickHandler(value) : operatorClickHandler(value);\n  const numberClickHandler = number => {\n    if (reset) {\n      resetDisplay(false)\n      setDisplay('');\n      setDisplay(oldNumber => oldNumber + String(number))\n    } else {\n      setDisplay(oldNumber => oldNumber + String(number));\n    }\n  }\n\n  const operatorClickHandler = operator => {\n    if (operator === '=') {\n      equalClickHandler();\n    }\n    if (operator === '%') {\n      percentageClickHandler();\n    } \n    else {\n      numberHelper(display)\n      setDisplay(operator === 'C' || operator === 'AC' ? '' : operator);\n      setOperator(operator);\n      resetDisplay(true)\n    }\n  }\n\n  const operationHandler = (firstValue, secondValue) => {\n    switch (operator) {\n      case '+': return Number(firstValue) + Number(secondValue);\n      case '-': return Number(firstValue) - Number(secondValue);\n      case 'x': return Number(firstValue) * Number(secondValue);\n      case 'รท': return Number(firstValue) / Number(secondValue);\n      // case 'C': return Number(secondValue);\n      case 'AC': {\n        numberHelper('')\n        setOperator('')\n        resetDisplay(false)\n        setDisplay('')\n        return 0;\n      }\n      default: return 0;\n    }\n  }\n\n  const equalClickHandler = () => {\n    const result = operationHandler(numberhelper, display)\n    setDisplay(result)\n    resetDisplay(true)\n  }\n\n  const percentageClickHandler = () => {\n    let result = 0;\n    const percentage = Number(display) / 100;\n\n    switch (operator) {\n      case '+': result = Number(numberhelper) + Number(numberhelper) * percentage; break;\n      case '-': result = Number(numberhelper) - Number(display) * percentage; break;\n      case 'x': result = Number(numberhelper) * percentage; break;\n      case 'รท': result = Number(numberhelper) / percentage; break;\n      // case 'C': return Number(secondValue);\n      case 'AC': {\n        numberHelper('')\n        setOperator('')\n        resetDisplay(false)\n        setDisplay('')\n        return 0;\n      }\n      default: return 0;\n    }\n    setDisplay(result)\n  }\n\n  const keys = ['C', 'AC', '%', 'รท', 7, 8, 9, 'x', 4, 5, 6, '-', 1, 2, 3, '+', 0, '.', '='];\n  return (\n    <CustomContainer>\n      <Display>{display === '' ? 0 : display}</Display>\n      <ButtonsContainer>\n        {keys.map((item, index) => {\n          return (\n            <NumberButton\n              variant=\"secondary\"\n              key={index}\n              button={item}\n              onClick={() => clickHandler(item)}\n            >\n              {item}\n            </NumberButton>\n          )\n        })}\n      </ButtonsContainer>\n    </CustomContainer>\n  );\n}\nexport default Home;","import React from 'react';\nimport HomeComponent from '../component/home'\n\nconst Home = () => {\n  return (<HomeComponent />);\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from './container/home'\nimport styled from 'styled-components';\nimport { Container } from 'react-bootstrap';\n\nconst CustomContainer = styled.div`\n  background-color:#303841;\n`;\n\nconst BodyContainer = styled(Container)`\n  display: flex;\n  justify-content:center;\n  flex-direction:column;\n  background-color:#303841;\n  color:#EEEEEE;\n  width:100%;\n  height:100%;\n`;\n\nfunction App() {\n  return (\n    <CustomContainer>\n      <BodyContainer >\n        <Home />\n      </BodyContainer>\n    </CustomContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}